import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../functions.dart';
import '../theme.dart';


class QuizGame extends StatefulWidget {
  final String groupId;
  final String teamId;

  const QuizGame({super.key, required this.groupId, required this.teamId});
  @override
  _QuizGameState createState() => _QuizGameState();
}

class _QuizGameState extends State<QuizGame> {
  List<Question> questions = [
    Question(question: 'ÿ∫ŸÜŸä ÿßÿ∫ŸÜŸäÿ© ŸÉÿ¥ŸÅŸäÿ© ŸÖÿπ ÿ∑ŸÑŸäÿπÿ™ŸÉ ( ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿßÿ∫ŸÜŸäÿ© ŸÉÿ¥ŸÅŸäÿ©'),
    Question(question: 'ÿ¥ŸÅÿ±ÿ© ÿπÿßÿØŸäÿ©', answer: 'ÿ¥ŸÅÿ±ÿ©'),
    Question(question: 'ŸÖÿß ŸáŸä ÿßÿßŸÑÿØŸàŸÑÿ© ÿßŸÑÿ™Ÿä ÿ™ŸÖ ÿ®Ÿáÿß ÿßÿÆÿ± ŸÖÿ§ÿ™ŸÖÿ± ŸÉÿ¥ŸÅŸä ÿπÿßŸÑŸÖŸä ( ÿ¥ŸÅÿ±ÿ©)', answer: 'ÿßŸÑÿØŸàŸÑÿ©'),
    Question(question: 'ŸÖÿ™Ÿä ÿ™ÿ£ÿ≥ÿ≥ÿ™ ÿßŸÑÿ≠ÿ±ŸÉÿ© ÿßŸÑŸÉÿ¥ŸÅŸäÿ© ŸÅŸä ŸÖÿµÿ±', answer: '1914'),
    Question(question: 'ŸÖŸÜ ŸáŸä ŸÖÿ§ÿ≥ÿ≥ÿ© ÿßŸÑŸÖÿ±ÿ¥ÿØÿßÿ™ ', answer: 'ÿ£ŸàŸÑŸäŸÅŸäÿ±'),
    Question(question: 'ÿπŸÖŸÑ ( 15 ÿ∂ÿ∫ÿ∑ ŸÅÿ±ÿØŸä + 30 ÿ®ÿ∑ŸÜ ŸÅÿ±ÿØŸä + ÿπÿ±ÿ®Ÿäÿ© ŸÅŸàŸÑ ŸÅŸä ÿØŸÇŸäŸÇÿ© ŸÑŸÑÿ∑ŸÑŸäÿπÿ©) ( ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿ™ŸÖÿßÿ±ŸäŸÜ'),
    Question(question: 'ŸÉŸÖ ÿπÿØÿØ ÿßŸÑŸÖÿµÿ±ŸäŸäŸÜ ÿßŸÑÿ≠ÿßÿµŸÑŸäŸÜ ÿπŸÑŸä ŸÜŸàÿ®ŸÑ', answer: '4'),
    Question(question: 'ŸÑÿπÿ®ÿ© ÿ±ŸÖŸä ÿßŸÑÿ¨ŸàŸÑÿ© (ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿ±ŸÖŸä ÿßŸÑÿ¨ŸàŸÑÿ©'),
    Question(question: 'ÿ¥ŸÅÿ±ÿ© ÿπÿßÿØŸäÿ©', answer: 'ÿ¥ŸÅÿ±ÿ©'),
    Question(question: 'ŸÉŸäŸÖ ÿ™ÿ∞ŸàŸÇ ( ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿ™ÿ∞ŸàŸÇ'),
    Question(question: 'ŸÉŸäŸÖ ÿ¥ŸÖ ( ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿ¥ŸÖ'),
    Question(question: 'ÿßŸÑŸÅÿ±ŸÇ ÿ®ŸäŸÜ ÿßŸÑÿ¥ŸÖÿßŸÑ ÿßŸÑÿ≠ŸÇŸäŸÇŸä ŸàÿßŸÑÿ¥ŸÖÿßŸÑ ÿßŸÑŸÖÿ∫ŸÜÿßÿ∑Ÿäÿ≥Ÿä', answer: 'ÿßŸÑŸÅÿ±ŸÇ'),
    Question(question: 'ŸÑŸÅ ŸàÿØŸàÿ±ÿßŸÜ ŸàŸÉŸàÿ±ÿ© ( ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ŸÑŸÅ ŸàÿØŸàÿ±ÿßŸÜ ŸàŸÉŸàÿ±ÿ©'),
    Question(question: 'ÿ±ÿ®ÿ∑ ÿßŸÑŸÅŸàŸÑÿßÿ± ÿ®ÿ∑ÿ±ŸäŸÇÿ™ŸäŸÜ ŸÖÿÆÿ™ŸÑŸÅÿ™ŸäŸÜ ( ÿßÿµÿ∫ÿ± ŸÅÿ±ÿØ ÿ®ÿßŸÑÿ∑ŸÑŸäÿπÿ©)(ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿ±ÿ®ÿ∑ ÿßŸÑŸÅŸàŸÑÿßÿ±'),
    Question(question: 'ŸÉŸÖ ÿπÿ∂ŸÖÿ© ŸÅŸä ÿ¨ÿ≥ŸÖ ÿßŸÑÿßŸÜÿ≥ÿßŸÜ (206 ÿπÿ∂ŸÖÿ©) ( ÿ¥ŸÅÿ±ÿ©)', answer: '206'),
    Question(question: 'ÿ±ÿ≥ŸÖ ÿßŸÑÿ≤Ÿä ÿßŸÑŸÉÿ¥ŸÅŸä ( ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿ±ÿ≥ŸÖ ÿßŸÑÿ≤Ÿä'),
    Question(question: 'ŸÖÿßŸáŸä ÿπÿØÿØ ÿßŸÑŸÖÿ¨ÿßŸÑÿ≥ ÿ®ÿßŸÑŸÅÿ±ŸÇÿ© ', answer: 'ÿπÿØÿØ ÿßŸÑŸÖÿ¨ÿßŸÑÿ≥'),
    Question(question: 'ÿßÿ±ÿ≥ŸÖ 5 ÿßÿπŸÑÿßŸÖ ŸÑÿ™ÿßÿ±ŸäÿÆ ŸÖÿµÿ± ( ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿßÿπŸÑÿßŸÖ'),
    Question(question: 'ÿßÿ∞ŸÉÿ± ÿßÿ≥ŸÖ ÿßŸàŸÑ ŸÅÿßÿ±ÿ≥ ÿ®ÿßŸÑÿ≠ÿ±ŸÉÿ© ', answer: 'ÿßÿ≥ŸÖ ÿßŸàŸÑ ŸÅÿßÿ±ÿ≥'),
    Question(question: 'ÿ¥ŸÅÿ±ÿ© ÿπÿßÿØŸäÿ© ', answer: 'ÿ¥ŸÅÿ±ÿ©'),
    Question(question: 'ŸÖÿßŸáŸä ÿßÿ≥ŸÖ ÿßŸÑÿ≤Ÿáÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ© ŸÅŸä ÿπŸÑŸÖ ŸàÿπÿØ ÿßŸÑŸÅÿ™ŸäÿßŸÜ ', answer: 'ÿßÿ≥ŸÖ ÿßŸÑÿ≤Ÿáÿ±ÿ©'),
    Question(question: 'ÿπŸÖŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿ®ÿßŸÑÿ≥ŸäŸÖÿßŸÅŸàÿ±(ŸÖÿ≥ÿßÿπÿØŸäŸÜ)', answer: 'ÿ±ÿ≥ÿßŸÑÿ© ÿ®ÿßŸÑÿ≥ŸäŸÖÿßŸÅŸàÿ±'),
    Question(question: 'ŸÖÿßŸáŸä ÿßŸÑŸÖÿ≥ÿßŸÅÿ© ÿ®ŸäŸÜ ÿßŸÑÿπÿ±ŸäŸÅ ŸàÿßŸàŸÑ ŸÅÿ±ÿØ ŸÅŸä ÿßŸÑÿ™ŸÅÿ™Ÿäÿ¥', answer: 'ÿßŸÑŸÖÿ≥ÿßŸÅÿ©'),
    Question(question: 'ÿ¥ŸÅÿ±ÿ© ÿπÿßÿØŸäÿ©', answer: 'ÿ¥ŸÅÿ±ÿ©'),
    Question(question: 'ŸÉŸäŸÖ ŸÜÿ∏ÿ±', answer: 'ŸÜÿ∏ÿ±'),
  ];
  int currentQuestionIndex = 0;
  String userAnswer = '';
  bool secondChance = false;
  final TextEditingController answerController = TextEditingController();
  String? groupId ;
  String? teamId ;
  @override
  void initState() {
    super.initState();
    groupId = widget.groupId;
    teamId = widget.teamId;
    loadQuestionIndex();
  }

  void loadQuestionIndex() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int? savedIndex = prefs.getInt('currentQuestionIndex');
    if (savedIndex != null) {
      setState(() {
        currentQuestionIndex = savedIndex;
      });
    }
  }

  void saveQuestionIndex() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('currentQuestionIndex', currentQuestionIndex);
  }
  void submitAnswer() {
    print(' currentQuestionIndex: $currentQuestionIndex , questions.length: ${questions.length}');
    if (currentQuestionIndex >= questions.length) {
      // Quiz is over
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return finish();
        },
      );
      return;
    }
    if (userAnswer.trim().toLowerCase() == questions[currentQuestionIndex].answer.trim().toLowerCase() || userAnswer.startsWith('ZQ')) {
      // Call updateScore from HomeWeb class
      if(userAnswer.startsWith('ZQ')){
        final taskScore = int.parse(userAnswer[userAnswer.length - 1]);
        updateScore( groupId!, teamId!, taskScore, context);
      }else{
     updateScore( groupId!, teamId!, 10, context);} // Adjust parameters as needed
     // saveQuestionIndex();
      setState(() {
        if(currentQuestionIndex == questions.length - 1){
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return finish();
            },
          );
          return;
        }
        currentQuestionIndex++;
        secondChance = false;
        answerController.clear();
      });
    } else if (!secondChance) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          backgroundColor: Colors.red,
          content: Center(child: Text('ÿ™ÿ≥ŸÑŸäŸÖ ÿÆÿßÿ∑ÿ¶, ŸÑÿØŸäŸÉ ŸÖÿ≠ÿßŸàŸÑÿ© Ÿàÿßÿ≠ÿØÿ© ÿßÿÆÿ±Ÿä Ÿàÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿßŸÜÿ™ŸÇÿßŸÑ ŸÑŸÑÿ™ÿßŸÑŸä')),
          duration: Duration(seconds: 2),
        ),
      );
      setState(() {
        secondChance = true;
        answerController.clear();
      });
    } else {
     // saveQuestionIndex();
      setState(() {
        if(currentQuestionIndex == questions.length - 1){
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return finish();
            },
          );
          return;
        }
        currentQuestionIndex++;
        secondChance = false;
        answerController.clear();
      });
    }
    answerController.clear();
    userAnswer = '';
  }
 Future<void> updateScore(String groupId, String teamId,
      int scoreIncrease,  BuildContext context) async {
try{
    CollectionReference teams = FirebaseFirestore.instance.collection(groupId);

    DocumentSnapshot teamSnapshot = await teams.doc(teamId).get();

    if (!teamSnapshot.exists) {
      throw Exception('Team does not exist!');
    }

    int newScore = teamSnapshot.get('score') + scoreIncrease; // Ensure this line is correct
    await teams.doc(teamId).update({'score': newScore}); // Ensure this line is correct
}catch(e){
  print(e);
}
  }

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        backgroundColor: primaryColor,
        appBar: AppBar(
          backgroundColor:  primaryColor,
          centerTitle: true,
          title:  Text(
            'ÿßŸÑŸÑÿπÿ®ÿ©',
            style: TextStyle(
              fontSize: 20,
              fontFamily: '18 Khebrat',
              color: secondColor,
            ),
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Column(
            children: <Widget>[
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Column(
                  children: [
                    Container(
                      decoration: BoxDecoration(
                        color: secondColor,
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Column(
                        children: [
                          Align(
                            alignment: Alignment.topRight,
                            child: Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: Text(' ÿ±ŸÇŸÖ ${currentQuestionIndex + 1}/25',style: TextStyle(
                                fontSize: 16,
                                fontFamily: '18 Khebrat',
                                color: primaryColor
                              ),),
                            ),
                          ),
                          SizedBox(height: 12,),
                          Center(
                            child: Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Text(questions[currentQuestionIndex].question,textAlign:TextAlign.center,style: TextStyle(

                                fontSize: 20,
                                fontFamily: '18 Khebrat',
                                color: primaryColor,
                              ),),
                            ),
                          ),

                          SizedBox(height: 12,),
                          if(questions[currentQuestionIndex].hint != null)
                            Align(
                              alignment: Alignment.bottomLeft,
                              child: Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: Text(' üóù : ${questions[currentQuestionIndex].hint}',style: TextStyle(
                                  fontSize: 12,
                                  fontFamily: '18 Khebrat',
                                  color: primaryColor
                                ),),
                              ),
                            ),

                        ],
                      ),
                    ),
                    SizedBox(height: 20,),
                  ],
                ),
              ),
             // Text(questions[currentQuestionIndex].question),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: TextField(
                  controller: answerController,
                  style: TextStyle(
                    color: secondColor,
                  ),
                  decoration: InputDecoration(
                    hintText: 'ÿßŸÑÿßÿ¨ÿßÿ®ÿ©',
                    hintStyle: TextStyle(
                      color: secondColor,
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderSide: BorderSide(
                        color: secondColor,
                      ),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderSide: BorderSide(
                        color: secondColor,
                      ),
                    ),
                  ),

                  onChanged: (value) {
                    userAnswer = value;
                  },
                ),
              ),
              SizedBox(height: 24,),
              ElevatedButton(
                onPressed: submitAnswer,
                style: ElevatedButton.styleFrom(
                  backgroundColor: secondColor,
                ),
                child: Text('ÿ™ÿ≥ŸÑŸäŸÖ',style: TextStyle(
                  fontSize: 18,
                  fontFamily: '18 Khebrat',
                  color: primaryColor,
                ),),
              ),
            ],
          ),
        ),
      ),
    );
  }
  Widget finish(){
    return Directionality(
      textDirection: TextDirection.rtl,
      child: AlertDialog(
        backgroundColor: secondColor,
        title: Text('ÿßŸÜÿ™Ÿáÿ™ ÿßŸÑŸÑÿπÿ®ÿ© !',style: TextStyle(
          fontSize: 20,
          fontFamily: '18 Khebrat',
          color: primaryColor,
        ),textAlign: TextAlign.center,),
        content: Text('ŸÑŸÇÿØ ÿ™ŸÖ ÿ™ÿ≥ŸÑŸäŸÖ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ÿ≠ÿØŸäÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠',style: TextStyle(
          fontSize: 16,
          fontFamily: '18 Khebrat',
          color: primaryColor,
        ),textAlign: TextAlign.center,),
        actions: <Widget>[
          TextButton(
            child: Text('ÿßÿ∫ŸÑÿßŸÇ',style: TextStyle(
              fontSize: 16,
              fontFamily: '18 Khebrat',
              color: primaryColor,
            ),),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }
}